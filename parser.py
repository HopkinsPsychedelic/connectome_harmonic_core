#included for documentation purposes
def _build_parser():
	parser = argparse.ArgumentParser(description='Connectome Harmonic Analysis Pipeline (CHAP)')
	parser.add_argument('output_dir', type = str, help = 'CHAP output directory (path)')
	parser.add_argument('analysis_level', type = str, help = 'Participant or group mode')
	parser.add_argument('--participant_label', nargs='+', help = 'Participant label(s) (not including sub-). If this parameter is not provided all subjects will be analyzed. Multiple participants can be specified with a space separated list')
	parser.add_argument('--qsi_dir', type = str, help = 'qsirecon output directory. Required for CHAP-BIDS pipeline')
	parser.add_argument('--hcp_dir', type = str, help = 'HCP (min) preprocessed data directory. First level should be test and retest folders OR if one session just downloads. If test-retest, downloads go in respective session folders. Required for CHAP-HCP pipeline.')
	parser.add_argument('--ciftify_dir', type = str, help = 'Ciftify dir (required for CHAP-BIDS)')
	parser.add_argument('--evecs', type = int, help = 'Number of eigenvectors (harmonics) to compute. Default is 100')
	parser.add_argument('--nnum', type = int, help = 'Number of nearest neighboring surface vertices to assign to each streamline endpoint. Default = 20' )
	parser.add_argument('--tol', type = int, help = '(Tolerance) search radius of nearest neighbor search for matching endpoints to surface vertices in mm. Default = 3')
	parser.add_arugment('--streamlines', type = int, help = 'Number of streamlines in MRtrix tckgen (CHAP-HCP only)')
	parser.add_argument('--skip_func', type = bool, help= 'Just find structural harmonics, no spectra.')
	parser.add_argument('--mask_med_wall', type = bool, help = 'Mask out medial wall vertices. Default is True.')
	parser.add_argument('--calculate_criticality', type = bool, help='compute the criticality of the spectra across subjects')